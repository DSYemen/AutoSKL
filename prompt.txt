اكتب كود إحترافي لإطار عمل التعلم الآلي التالي:
إطار عمل التعلم الآلي هذا هو نظام شامل مصمم للتعامل مع جوانب مختلفة من التعلم الآلي، بدءًا من معالجة البيانات وتدريب النماذج حتى المراقبة والنشر. يتم بناء الإطار باستخدام FastAPI للواجهة الخلفية، ويدمج العديد من مكتبات التعلم الآلي مثل scikit-learn وXGBoost وLightGBM وCatBoost. كما يتضمن النظام ميزات متقدمة مثل التحديث التلقائي للنماذج، والمراقبة، وإنشاء التقارير.

المكونات الرئيسية
التكوين (config.yaml):

يحدد الإعدادات المتنوعة للتطبيق، بما في ذلك معلمات النموذج، وإعدادات التحسين، وفترات المراقبة.

المتطلبات (requirements.txt):

يسرد جميع تبعيات Python المطلوبة لتشغيل الإطار، بما في ذلك FastAPI وscikit-learn وOptuna ومكتبات التصور المختلفة.

نقطة الدخول (run.py):

نقطة الدخول الرئيسية للتطبيق. يبدأ التطبيق FastAPI وخيطًا منفصلًا لتحديث النماذج.

التطبيق الرئيسي (app/main.py):

يقوم بإعداد تطبيق FastAPI، بما في ذلك المسارات والوسيط ومعالجي الأحداث للبدء والإيقاف.

وثائق API (app/api/docs.py):

يُنشئ وثائق API تفاعلية باستخدام Swagger UI.

مسارات API (app/api/routes.py):

يحدد نقاط نهاية API لتدريب النماذج، وإجراء التنبؤات، وتحديث النماذج.

التكوين الأساسي (app/core/config.py):

يقوم بتحميل إعدادات التكوين من config.yaml ويوفرها للتطبيق.

تكوين التسجيل (app/core/logging_config.py):

يقوم بتكوين التسجيل للتطبيق، بما في ذلك التسجيل في الملفات ووحدة التحكم.

قاعدة البيانات (app/db/database.py):

يقوم بإعداد قاعدة بيانات SQLite ويوفر تبعية الجلسة لعمليات قاعدة البيانات.

نماذج قاعدة البيانات (app/db/models.py):

يحدد نماذج SQLAlchemy لتخزين سجلات النماذج، وسجلات التنبؤات، وسجلات المراقبة.

مدير النماذج (app/ml/model_manager.py):

يدير دورة حياة نماذج التعلم الآلي، بما في ذلك حفظ النماذج وتحميلها وحذفها.

تقييم النموذج (app/ml/model_evaluation.py):

يوفر تقييمًا شاملاً للنموذج، بما في ذلك المقاييس الأساسية والمتقدمة، وتحليل الأخطاء، وتحليل قيم SHAP.

معالجة البيانات (app/ml/data_processing.py):

يتعامل مع معالجة البيانات المسبقة، بما في ذلك الإحلال، والتوسع، واختيار الميزات، وتقسيم البيانات.

اختيار النموذج (app/ml/model_selection.py):

يختار أفضل نموذج باستخدام Optuna لتحسين المعلمات الفائقة.

تدريب النموذج (app/ml/model_training.py):

يقوم بتدريب نماذج التعلم الآلي، ويدعم التدريب التدريجي، ويسجل مقاييس التدريب.

تحديث النموذج (app/ml/model_updater.py):

يقوم بتحديث النماذج تلقائيًا باستخدام البيانات الجديدة ويتحقق من تحسن الأداء.

التحقق من النموذج (app/ml/model_validator.py):

يقوم بالتحقق من النماذج باستخدام التحقق المتقاطع، والتحقق من الاستقرار، والتحقق من الافتراضات.

المراقبة (app/ml/monitoring.py):

يقوم بمراقبة أداء النموذج وتسجيل التنبؤات لتحليل الانحراف.

خدمة التنبؤ (app/ml/prediction.py):

توفر خدمة لإجراء التنبؤات باستخدام النماذج المدربة، مع دعم للتنبؤات المجمعة والتخزين المؤقت.

مولد التقارير (app/reporting/report_generator.py):

يُنشئ تقارير شاملة لأداء النموذج والتنبؤات.

المخططات (app/schemas/model.py):

يحدد نماذج Pydantic لمخططات الطلبات والاستجابات.

نظام التنبيه (app/utils/alerts.py):

يرسل تنبيهات عبر البريد الإلكتروني بناءً على حدود محددة مسبقًا لمقاييس أداء النموذج.

مدير التخزين المؤقت (app/utils/cache.py):

يدير التخزين المؤقت للتنبؤات وبيانات النموذج باستخدام Redis.

التوثيق (app/utils/documentation.py):

يُنشئ توثيقًا للنماذج ونقاط نهاية API.

الاستثناءات (app/utils/exceptions.py):

يحدد استثناءات مخصصة لإطار العمل الآلي ويوفر معالجًا لتحويلها إلى استثناءات HTTP.

المهام (app/utils/taske.py):

يحدد مهام الخلفية باستخدام Celery لإعادة تدريب النماذج وتحديث مقاييس المراقبة.

التصور (app/utils/visualization.py):

يوفر وظائف الأداة لإنشاء التصورات، بما في ذلك أهمية الميزات ومنحنيات التعلم.

لوحة التحكم (app/visualization/dashboard.py):

يُنشئ لوحة تحكم شاملة لتصور أداء النموذج والتنبؤات.

الملفات الثابتة (static/):

تحتوي على ملفات CSS وJavaScript وغيرها من الأصول الثابتة للواجهة الأمامية.

القوالب (templates/):

تحتوي على قوالب HTML للواجهة الأمامية، بما في ذلك لوحة التحكم الرئيسية وصفحة الفهرس وصفحة النتائج.


كيف يعمل
معالجة البيانات:

يقرأ الإطار البيانات من تنسيقات ملفات مختلفة (CSV، Excel، Parquet) ويقوم بخطوات المعالجة المسبقة مثل الإحلال، والتوسع، واختيار الميزات.

اختيار وتدريب النموذج:

يتم اختيار أفضل نموذج باستخدام Optuna لتحسين المعلمات الفائقة. ثم يتم تدريب النموذج المختار وتقييمه باستخدام التحقق المتقاطع.

تقييم النموذج:

يتم تقييم النموذج المدرب باستخدام مقاييس متنوعة، ويتم حساب قيم SHAP لفهم أهمية الميزات.

المراقبة والتحديث:

يقوم الإطار بمراقبة أداء النموذج باستمرار ويقوم بتحديث النموذج باستخدام البيانات الجديدة إذا تحسن الأداء.

خدمة التنبؤ:

تسمح خدمة التنبؤ للمستخدمين بإجراء تنبؤات باستخدام النماذج المدربة، مع دعم للتنبؤات المجمعة والتخزين المؤقت.

التقارير والتصور:

يتم إنشاء تقارير وتصورات شاملة لمساعدة المستخدمين على فهم أداء النموذج والتنبؤات.

استنتاج
إطار عمل التعلم الآلي هذا هو حل قوي وقابل للتوسع لإدارة سيرورات التعلم الآلي. يدمج العديد من المكونات لمعالجة البيانات، وتدريب النماذج، والمراقبة، والنشر، مما يجعله أداة قوية لكل من المبتدئين والمستخدمين المتقدمين في مجال التعلم الآلي.


اريد منك أن تستخدم أحدث الإصدرات من المكتبات والحزم  وخاصة مكتبات التعلم الآلي  وتتأكد من أن الكود متوافق معهن وإتبع أفضل الممارسات في بناء أطر العمل و ومشاريع التعلم الألي.


أريد أن يدعم كل الخوارزميات في scikit-learn  فالهدف من الإطار هو تنفيذ خوارزميات scikit-learn بشكل أوتوماتيكي حسب حالة البيانات  بحيث يختار المستخدم نوع الخوارزميات  توقع, تصنيف , تجميع , تقليل أبعاد  , ويرفع ملفات البيانات  ويقوم اطار العمل بكل شيء بشكل أوتوماتيكي